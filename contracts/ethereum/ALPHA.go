// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ethereum

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ALPHAABI is the input ABI used to generate the binding from.
const ALPHAABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"devWalletAddress\",\"type\":\"address\"}],\"name\":\"setDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contractIUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// ALPHABin is the compiled bytecode used for deploying new contracts.
var ALPHABin = "0x60c060405269d3c21bcecceda100000060085560085460001962000024919062000849565b6000196200003391906200079a565b6009556040518060400160405280600d81526020017f416c7068612046696e616e636500000000000000000000000000000000000000815250600b9080519060200190620000839291906200063b565b506040518060400160405280600581526020017f414c504841000000000000000000000000000000000000000000000000000000815250600c9080519060200190620000d19291906200063b565b506009600d60006101000a81548160ff021916908360ff1602179055506002600e55600e54600f55600460105560105460115560046012556012546013556001601460016101000a81548160ff021916908315150217905550674563918244f400006015553480156200014357600080fd5b5073bddc048834e20c0c02f62ad8338df2c56c1345786000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600954600160006200022a6200061260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620002786200061260201b60201c565b600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000737a250d5630b4cf539739df2c5dacb4c659f2488d90508073ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156200031857600080fd5b505afa1580156200032d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000353919062000702565b73ffffffffffffffffffffffffffffffffffffffff1663c9c65396308373ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015620003b657600080fd5b505afa158015620003cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f1919062000702565b6040518363ffffffff1660e01b81526004016200041092919062000750565b602060405180830381600087803b1580156200042b57600080fd5b505af115801562000440573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000466919062000702565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050600160046000620004e96200061260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620005a26200061260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040516200060391906200077d565b60405180910390a35062000928565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620006499062000813565b90600052602060002090601f0160209004810192826200066d5760008555620006b9565b82601f106200068857805160ff1916838001178555620006b9565b82800160010185558215620006b9579182015b82811115620006b85782518255916020019190600101906200069b565b5b509050620006c89190620006cc565b5090565b5b80821115620006e7576000816000905550600101620006cd565b5090565b600081519050620006fc816200090e565b92915050565b6000602082840312156200071557600080fd5b60006200072584828501620006eb565b91505092915050565b6200073981620007d5565b82525050565b6200074a8162000809565b82525050565b60006040820190506200076760008301856200072e565b6200077660208301846200072e565b9392505050565b60006020820190506200079460008301846200073f565b92915050565b6000620007a78262000809565b9150620007b48362000809565b925082821015620007ca57620007c962000881565b5b828203905092915050565b6000620007e282620007e9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200082c57607f821691505b60208210811415620008435762000842620008df565b5b50919050565b6000620008568262000809565b9150620008638362000809565b925082620008765762000875620008b0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6200091981620007d5565b81146200092557600080fd5b50565b60805160601c60a05160601c614ebb6200097e600039600081816114050152612275015260008181610a9301528181612e2f01528181612f4501528181612f6c01528181613008015261302f0152614ebb6000f3fe6080604052600436106102085760003560e01c806349bd5a5e116101185780638ee88c53116100a0578063aa45026b1161006f578063aa45026b146107ae578063c49b9a80146107d9578063dd62ed3e14610802578063ea2f0b371461083f578063f2fde38b146108685761020f565b80638ee88c53146106e057806395d89b4114610709578063a457c2d714610734578063a9059cbb146107715761020f565b80636bc87c3a116100e75780636bc87c3a146105f957806370a0823114610624578063715018a61461066157806388f82020146106785780638da5cb5b146106b55761020f565b806349bd5a5e1461053d5780634a74bb021461056857806352390c02146105935780635342acb4146105bc5761020f565b80632d8381191161019b578063395093511161016a57806339509351146104465780633b124fe7146104835780633bd5d173146104ae578063437823ec146104d75780634549b039146105005761020f565b80632d8381191461038c578063313ce567146103c95780633685d419146103f4578063379e29191461041d5761020f565b806313114a9d116101d757806313114a9d146102ce5780631694505e146102f957806318160ddd1461032457806323b872dd1461034f5761020f565b8063061c82d01461021457806306fdde031461023d578063095ea7b314610268578063120a0612146102a55761020f565b3661020f57005b600080fd5b34801561022057600080fd5b5061023b6004803603810190610236919061419d565b610891565b005b34801561024957600080fd5b50610252610917565b60405161025f919061459c565b60405180910390f35b34801561027457600080fd5b5061028f600480360381019061028a9190614138565b6109a9565b60405161029c9190614566565b60405180910390f35b3480156102b157600080fd5b506102cc60048036038101906102c7919061405b565b6109c7565b005b3480156102da57600080fd5b506102e3610a87565b6040516102f0919061471e565b60405180910390f35b34801561030557600080fd5b5061030e610a91565b60405161031b9190614581565b60405180910390f35b34801561033057600080fd5b50610339610ab5565b604051610346919061471e565b60405180910390f35b34801561035b57600080fd5b50610376600480360381019061037191906140e9565b610abf565b6040516103839190614566565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae919061419d565b610b98565b6040516103c0919061471e565b60405180910390f35b3480156103d557600080fd5b506103de610c06565b6040516103eb91906147ca565b60405180910390f35b34801561040057600080fd5b5061041b6004803603810190610416919061405b565b610c1d565b005b34801561042957600080fd5b50610444600480360381019061043f919061419d565b610feb565b005b34801561045257600080fd5b5061046d60048036038101906104689190614138565b611071565b60405161047a9190614566565b60405180910390f35b34801561048f57600080fd5b50610498611124565b6040516104a5919061471e565b60405180910390f35b3480156104ba57600080fd5b506104d560048036038101906104d0919061419d565b61112a565b005b3480156104e357600080fd5b506104fe60048036038101906104f9919061405b565b6112a6565b005b34801561050c57600080fd5b50610527600480360381019061052291906141c6565b61137d565b604051610534919061471e565b60405180910390f35b34801561054957600080fd5b50610552611403565b60405161055f91906144ea565b60405180910390f35b34801561057457600080fd5b5061057d611427565b60405161058a9190614566565b60405180910390f35b34801561059f57600080fd5b506105ba60048036038101906105b5919061405b565b61143a565b005b3480156105c857600080fd5b506105e360048036038101906105de919061405b565b6116d5565b6040516105f09190614566565b60405180910390f35b34801561060557600080fd5b5061060e61172b565b60405161061b919061471e565b60405180910390f35b34801561063057600080fd5b5061064b6004803603810190610646919061405b565b611731565b604051610658919061471e565b60405180910390f35b34801561066d57600080fd5b5061067661181c565b005b34801561068457600080fd5b5061069f600480360381019061069a919061405b565b611956565b6040516106ac9190614566565b60405180910390f35b3480156106c157600080fd5b506106ca6119ac565b6040516106d791906144ea565b60405180910390f35b3480156106ec57600080fd5b506107076004803603810190610702919061419d565b6119d5565b005b34801561071557600080fd5b5061071e611a5b565b60405161072b919061459c565b60405180910390f35b34801561074057600080fd5b5061075b60048036038101906107569190614138565b611aed565b6040516107689190614566565b60405180910390f35b34801561077d57600080fd5b5061079860048036038101906107939190614138565b611bba565b6040516107a59190614566565b60405180910390f35b3480156107ba57600080fd5b506107c3611bd8565b6040516107d0919061471e565b60405180910390f35b3480156107e557600080fd5b5061080060048036038101906107fb9190614174565b611bde565b005b34801561080e57600080fd5b50610829600480360381019061082491906140ad565b611cae565b604051610836919061471e565b60405180910390f35b34801561084b57600080fd5b506108666004803603810190610861919061405b565b611d35565b005b34801561087457600080fd5b5061088f600480360381019061088a919061405b565b611e0c565b005b610899611fb5565b73ffffffffffffffffffffffffffffffffffffffff166108b76119ac565b73ffffffffffffffffffffffffffffffffffffffff161461090d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109049061467e565b60405180910390fd5b80600e8190555050565b6060600b805461092690614a0d565b80601f016020809104026020016040519081016040528092919081815260200182805461095290614a0d565b801561099f5780601f106109745761010080835404028352916020019161099f565b820191906000526020600020905b81548152906001019060200180831161098257829003601f168201915b5050505050905090565b60006109bd6109b6611fb5565b8484611fbd565b6001905092915050565b6109cf611fb5565b73ffffffffffffffffffffffffffffffffffffffff166109ed6119ac565b73ffffffffffffffffffffffffffffffffffffffff1614610a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3a9061467e565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a54905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600854905090565b6000610acc848484612188565b610b8d84610ad8611fb5565b610b8885604051806060016040528060288152602001614e3960289139600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610b3e611fb5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b59092919063ffffffff16565b611fbd565b600190509392505050565b6000600954821115610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd6906145be565b60405180910390fd5b6000610be961240a565b9050610bfe818461243590919063ffffffff16565b915050919050565b6000600d60009054906101000a900460ff16905090565b610c25611fb5565b73ffffffffffffffffffffffffffffffffffffffff16610c436119ac565b73ffffffffffffffffffffffffffffffffffffffff1614610c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c909061467e565b60405180910390fd5b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c9061463e565b60405180910390fd5b60005b600680549050811015610fe7578173ffffffffffffffffffffffffffffffffffffffff1660068281548110610d86577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610fd45760066001600680549050610de1919061491b565b81548110610e18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660068281548110610e7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506006805480610f9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610fe7565b8080610fdf90614a3f565b915050610d28565b5050565b610ff3611fb5565b73ffffffffffffffffffffffffffffffffffffffff166110116119ac565b73ffffffffffffffffffffffffffffffffffffffff1614611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e9061467e565b60405180910390fd5b8060108190555050565b600061111a61107e611fb5565b84611115856003600061108f611fb5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b611fbd565b6001905092915050565b600e5481565b6000611134611fb5565b9050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156111c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ba906146fe565b60405180910390fd5b60006111ce83612461565b505050505050905061122881600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124c990919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611280816009546124c990919063ffffffff16565b60098190555061129b83600a5461244b90919063ffffffff16565b600a81905550505050565b6112ae611fb5565b73ffffffffffffffffffffffffffffffffffffffff166112cc6119ac565b73ffffffffffffffffffffffffffffffffffffffff1614611322576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113199061467e565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006008548311156113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb9061465e565b60405180910390fd5b816113e55760006113d484612461565b5050505050509050809150506113fd565b60006113f084612461565b5050505050915050809150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b601460019054906101000a900460ff1681565b611442611fb5565b73ffffffffffffffffffffffffffffffffffffffff166114606119ac565b73ffffffffffffffffffffffffffffffffffffffff16146114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad9061467e565b60405180910390fd5b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153a9061461e565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611617576115d3600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b98565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506006819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60125481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156117cc57600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611817565b611814600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b98565b90505b919050565b611824611fb5565b73ffffffffffffffffffffffffffffffffffffffff166118426119ac565b73ffffffffffffffffffffffffffffffffffffffff1614611898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188f9061467e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6119dd611fb5565b73ffffffffffffffffffffffffffffffffffffffff166119fb6119ac565b73ffffffffffffffffffffffffffffffffffffffff1614611a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a489061467e565b60405180910390fd5b8060128190555050565b6060600c8054611a6a90614a0d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9690614a0d565b8015611ae35780601f10611ab857610100808354040283529160200191611ae3565b820191906000526020600020905b815481529060010190602001808311611ac657829003601f168201915b5050505050905090565b6000611bb0611afa611fb5565b84611bab85604051806060016040528060258152602001614e616025913960036000611b24611fb5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123b59092919063ffffffff16565b611fbd565b6001905092915050565b6000611bce611bc7611fb5565b8484612188565b6001905092915050565b60105481565b611be6611fb5565b73ffffffffffffffffffffffffffffffffffffffff16611c046119ac565b73ffffffffffffffffffffffffffffffffffffffff1614611c5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c519061467e565b60405180910390fd5b80601460016101000a81548160ff0219169083151502179055507f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc15981604051611ca39190614566565b60405180910390a150565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611d3d611fb5565b73ffffffffffffffffffffffffffffffffffffffff16611d5b6119ac565b73ffffffffffffffffffffffffffffffffffffffff1614611db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da89061467e565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b611e14611fb5565b73ffffffffffffffffffffffffffffffffffffffff16611e326119ac565b73ffffffffffffffffffffffffffffffffffffffff1614611e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7f9061467e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ef8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eef906145de565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561202d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612024906146de565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561209d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612094906145fe565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161217b919061471e565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ef906146be565b60405180910390fd5b6000811161223b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122329061469e565b60405180910390fd5b600061224630611731565b90506000601554821015905080801561226c5750601460009054906101000a900460ff16155b80156122c457507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b80156122dc5750601460019054906101000a900460ff165b156122f05760155491506122ef826124df565b5b600060019050600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806123975750600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156123a157600090505b6123ad868686846125b5565b505050505050565b60008383111582906123fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f4919061459c565b60405180910390fd5b5082840390509392505050565b60008060006124176128c6565b9150915061242e818361243590919063ffffffff16565b9250505090565b600081836124439190614890565b905092915050565b60008183612459919061483a565b905092915050565b600080600080600080600080600080600061247b8c612c11565b9350935093509350600080600061249c8f87878761249761240a565b612c90565b925092509250828282898989899d509d509d509d509d509d509d5050505050505050919395979092949650565b600081836124d7919061491b565b905092915050565b6001601460006101000a81548160ff021916908315150217905550600061251060028361243590919063ffffffff16565b9050600061252782846124c990919063ffffffff16565b9050600047905061253783612d44565b600061254c82476124c990919063ffffffff16565b90506125588382613002565b7f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb56184828560405161258b93929190614793565b60405180910390a1505050506000601460006101000a81548160ff02191690831515021790555050565b806125c3576125c26130f2565b5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680156126665750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561267b57612676848484613146565b6128b2565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615801561271e5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156127335761272e8484846133b4565b6128b1565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156127d75750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156127ec576127e7848484613622565b6128b0565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16801561288e5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156128a35761289e8484846137fb565b6128af565b6128ae848484613622565b5b5b5b5b806128c0576128bf613afe565b5b50505050565b600080600060095490506000600854905060005b600680549050811015612bd457826001600060068481548110612926577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180612a3a57508160026000600684815481106129d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b15612a515760095460085494509450505050612c0d565b612b076001600060068481548110612a92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846124c990919063ffffffff16565b9250612bbf6002600060068481548110612b4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836124c990919063ffffffff16565b91508080612bcc90614a3f565b9150506128da565b50612bec60085460095461243590919063ffffffff16565b821015612c0457600954600854935093505050612c0d565b81819350935050505b9091565b6000806000806000612c2286613b1b565b90506000612c2f87613b4c565b90506000612c3c88613b7d565b90506000612c7782612c6985612c5b888e6124c990919063ffffffff16565b6124c990919063ffffffff16565b6124c990919063ffffffff16565b9050808484849750975097509750505050509193509193565b600080600080612ca9858a613bae90919063ffffffff16565b90506000612cc0868a613bae90919063ffffffff16565b90506000612cd7878a613bae90919063ffffffff16565b90506000612cee888a613bae90919063ffffffff16565b90506000612d2982612d1b85612d0d888a6124c990919063ffffffff16565b6124c990919063ffffffff16565b6124c990919063ffffffff16565b90508481859750975097505050505050955095509592505050565b6000600267ffffffffffffffff811115612d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612db55781602001602082028036833780820191505090505b5090503081600081518110612df3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9357600080fd5b505afa158015612ea7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecb9190614084565b81600181518110612f05577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612f6a307f000000000000000000000000000000000000000000000000000000000000000084611fbd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b8152600401612fcc959493929190614739565b600060405180830381600087803b158015612fe657600080fd5b505af1158015612ffa573d6000803e3d6000fd5b505050505050565b61302d307f000000000000000000000000000000000000000000000000000000000000000084611fbd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f305d7198230856000806130776119ac565b426040518863ffffffff1660e01b815260040161309996959493929190614505565b6060604051808303818588803b1580156130b257600080fd5b505af11580156130c6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906130eb9190614202565b5050505050565b6000600e5414801561310657506000601254145b1561311057613144565b600e54600f819055506010546011819055506012546013819055506000600e81905550600060108190555060006012819055505b565b600080600080600080600061315a88612461565b96509650965096509650965096506131ba88600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124c990919063ffffffff16565b600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061324f87600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124c990919063ffffffff16565b600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506132e486600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061333082613bc4565b61333981613d69565b6133438584613fb8565b8873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516133a0919061471e565b60405180910390a350505050505050505050565b60008060008060008060006133c888612461565b965096509650965096509650965061342887600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124c990919063ffffffff16565b600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506134bd84600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061355286600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061359e82613bc4565b6135a781613d69565b6135b18584613fb8565b8873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161360e919061471e565b60405180910390a350505050505050505050565b600080600080600080600061363688612461565b965096509650965096509650965061369687600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124c990919063ffffffff16565b600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061372b86600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061377782613bc4565b61378081613d69565b61378a8584613fb8565b8873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516137e7919061471e565b60405180910390a350505050505050505050565b600080600080600080600061380f88612461565b965096509650965096509650965061386f88600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124c990919063ffffffff16565b600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061390487600160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124c990919063ffffffff16565b600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061399984600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a2e86600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613a7a82613bc4565b613a8381613d69565b613a8d8584613fb8565b8873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051613aea919061471e565b60405180910390a350505050505050505050565b600f54600e81905550601154601081905550601354601281905550565b6000613b456064613b37600e5485613bae90919063ffffffff16565b61243590919063ffffffff16565b9050919050565b6000613b766064613b6860125485613bae90919063ffffffff16565b61243590919063ffffffff16565b9050919050565b6000613ba76064613b9960105485613bae90919063ffffffff16565b61243590919063ffffffff16565b9050919050565b60008183613bbc91906148c1565b905092915050565b6000613bce61240a565b90506000613be58284613bae90919063ffffffff16565b9050613c3981600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613d6457613d2083600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505050565b6000613d7361240a565b90506000613d8a8284613bae90919063ffffffff16565b9050613e008160016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060056000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613fb357613f4d8360026000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244b90919063ffffffff16565b60026000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505050565b613fcd826009546124c990919063ffffffff16565b600981905550613fe881600a5461244b90919063ffffffff16565b600a819055505050565b60008135905061400181614df3565b92915050565b60008151905061401681614df3565b92915050565b60008135905061402b81614e0a565b92915050565b60008135905061404081614e21565b92915050565b60008151905061405581614e21565b92915050565b60006020828403121561406d57600080fd5b600061407b84828501613ff2565b91505092915050565b60006020828403121561409657600080fd5b60006140a484828501614007565b91505092915050565b600080604083850312156140c057600080fd5b60006140ce85828601613ff2565b92505060206140df85828601613ff2565b9150509250929050565b6000806000606084860312156140fe57600080fd5b600061410c86828701613ff2565b935050602061411d86828701613ff2565b925050604061412e86828701614031565b9150509250925092565b6000806040838503121561414b57600080fd5b600061415985828601613ff2565b925050602061416a85828601614031565b9150509250929050565b60006020828403121561418657600080fd5b60006141948482850161401c565b91505092915050565b6000602082840312156141af57600080fd5b60006141bd84828501614031565b91505092915050565b600080604083850312156141d957600080fd5b60006141e785828601614031565b92505060206141f88582860161401c565b9150509250929050565b60008060006060848603121561421757600080fd5b600061422586828701614046565b935050602061423686828701614046565b925050604061424786828701614046565b9150509250925092565b600061425d8383614269565b60208301905092915050565b6142728161494f565b82525050565b6142818161494f565b82525050565b6000614292826147f5565b61429c8185614818565b93506142a7836147e5565b8060005b838110156142d85781516142bf8882614251565b97506142ca8361480b565b9250506001810190506142ab565b5085935050505092915050565b6142ee81614961565b82525050565b6142fd816149a4565b82525050565b61430c816149c8565b82525050565b600061431d82614800565b6143278185614829565b93506143378185602086016149da565b61434081614b15565b840191505092915050565b6000614358602a83614829565b915061436382614b26565b604082019050919050565b600061437b602683614829565b915061438682614b75565b604082019050919050565b600061439e602283614829565b91506143a982614bc4565b604082019050919050565b60006143c1601b83614829565b91506143cc82614c13565b602082019050919050565b60006143e4601b83614829565b91506143ef82614c3c565b602082019050919050565b6000614407601f83614829565b915061441282614c65565b602082019050919050565b600061442a602083614829565b915061443582614c8e565b602082019050919050565b600061444d602983614829565b915061445882614cb7565b604082019050919050565b6000614470602583614829565b915061447b82614d06565b604082019050919050565b6000614493602483614829565b915061449e82614d55565b604082019050919050565b60006144b6602c83614829565b91506144c182614da4565b604082019050919050565b6144d58161498d565b82525050565b6144e481614997565b82525050565b60006020820190506144ff6000830184614278565b92915050565b600060c08201905061451a6000830189614278565b61452760208301886144cc565b6145346040830187614303565b6145416060830186614303565b61454e6080830185614278565b61455b60a08301846144cc565b979650505050505050565b600060208201905061457b60008301846142e5565b92915050565b600060208201905061459660008301846142f4565b92915050565b600060208201905081810360008301526145b68184614312565b905092915050565b600060208201905081810360008301526145d78161434b565b9050919050565b600060208201905081810360008301526145f78161436e565b9050919050565b6000602082019050818103600083015261461781614391565b9050919050565b60006020820190508181036000830152614637816143b4565b9050919050565b60006020820190508181036000830152614657816143d7565b9050919050565b60006020820190508181036000830152614677816143fa565b9050919050565b600060208201905081810360008301526146978161441d565b9050919050565b600060208201905081810360008301526146b781614440565b9050919050565b600060208201905081810360008301526146d781614463565b9050919050565b600060208201905081810360008301526146f781614486565b9050919050565b60006020820190508181036000830152614717816144a9565b9050919050565b600060208201905061473360008301846144cc565b92915050565b600060a08201905061474e60008301886144cc565b61475b6020830187614303565b818103604083015261476d8186614287565b905061477c6060830185614278565b61478960808301846144cc565b9695505050505050565b60006060820190506147a860008301866144cc565b6147b560208301856144cc565b6147c260408301846144cc565b949350505050565b60006020820190506147df60008301846144db565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006148458261498d565b91506148508361498d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561488557614884614a88565b5b828201905092915050565b600061489b8261498d565b91506148a68361498d565b9250826148b6576148b5614ab7565b5b828204905092915050565b60006148cc8261498d565b91506148d78361498d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149105761490f614a88565b5b828202905092915050565b60006149268261498d565b91506149318361498d565b92508282101561494457614943614a88565b5b828203905092915050565b600061495a8261496d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006149af826149b6565b9050919050565b60006149c18261496d565b9050919050565b60006149d38261498d565b9050919050565b60005b838110156149f85780820151818401526020810190506149dd565b83811115614a07576000848401525b50505050565b60006002820490506001821680614a2557607f821691505b60208210811415614a3957614a38614ae6565b5b50919050565b6000614a4a8261498d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a7d57614a7c614a88565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260008201527f65666c656374696f6e7300000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f4163636f756e7420697320616c7265616479206578636c756465640000000000600082015250565b7f4163636f756e7420697320616c726561647920696e636c756465640000000000600082015250565b7f416d6f756e74206d757374206265206c657373207468616e20737570706c7900600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5472616e7366657220616d6f756e74206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4578636c75646564206164647265737365732063616e6e6f742063616c6c207460008201527f6869732066756e6374696f6e0000000000000000000000000000000000000000602082015250565b614dfc8161494f565b8114614e0757600080fd5b50565b614e1381614961565b8114614e1e57600080fd5b50565b614e2a8161498d565b8114614e3557600080fd5b5056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122053e3e6ac198d2526fc6c1186985f28dfdc1166222b35e5fe89ea416e3f12d6c164736f6c63430008030033"

// DeployALPHA deploys a new Ethereum contract, binding an instance of ALPHA to it.
func DeployALPHA(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ALPHA, error) {
	parsed, err := abi.JSON(strings.NewReader(ALPHAABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ALPHABin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ALPHA{ALPHACaller: ALPHACaller{contract: contract}, ALPHATransactor: ALPHATransactor{contract: contract}, ALPHAFilterer: ALPHAFilterer{contract: contract}}, nil
}

// ALPHA is an auto generated Go binding around an Ethereum contract.
type ALPHA struct {
	ALPHACaller     // Read-only binding to the contract
	ALPHATransactor // Write-only binding to the contract
	ALPHAFilterer   // Log filterer for contract events
}

// ALPHACaller is an auto generated read-only Go binding around an Ethereum contract.
type ALPHACaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ALPHATransactor is an auto generated write-only Go binding around an Ethereum contract.
type ALPHATransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ALPHAFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ALPHAFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ALPHASession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ALPHASession struct {
	Contract     *ALPHA            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ALPHACallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ALPHACallerSession struct {
	Contract *ALPHACaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ALPHATransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ALPHATransactorSession struct {
	Contract     *ALPHATransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ALPHARaw is an auto generated low-level Go binding around an Ethereum contract.
type ALPHARaw struct {
	Contract *ALPHA // Generic contract binding to access the raw methods on
}

// ALPHACallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ALPHACallerRaw struct {
	Contract *ALPHACaller // Generic read-only contract binding to access the raw methods on
}

// ALPHATransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ALPHATransactorRaw struct {
	Contract *ALPHATransactor // Generic write-only contract binding to access the raw methods on
}

// NewALPHA creates a new instance of ALPHA, bound to a specific deployed contract.
func NewALPHA(address common.Address, backend bind.ContractBackend) (*ALPHA, error) {
	contract, err := bindALPHA(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ALPHA{ALPHACaller: ALPHACaller{contract: contract}, ALPHATransactor: ALPHATransactor{contract: contract}, ALPHAFilterer: ALPHAFilterer{contract: contract}}, nil
}

// NewALPHACaller creates a new read-only instance of ALPHA, bound to a specific deployed contract.
func NewALPHACaller(address common.Address, caller bind.ContractCaller) (*ALPHACaller, error) {
	contract, err := bindALPHA(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ALPHACaller{contract: contract}, nil
}

// NewALPHATransactor creates a new write-only instance of ALPHA, bound to a specific deployed contract.
func NewALPHATransactor(address common.Address, transactor bind.ContractTransactor) (*ALPHATransactor, error) {
	contract, err := bindALPHA(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ALPHATransactor{contract: contract}, nil
}

// NewALPHAFilterer creates a new log filterer instance of ALPHA, bound to a specific deployed contract.
func NewALPHAFilterer(address common.Address, filterer bind.ContractFilterer) (*ALPHAFilterer, error) {
	contract, err := bindALPHA(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ALPHAFilterer{contract: contract}, nil
}

// bindALPHA binds a generic wrapper to an already deployed contract.
func bindALPHA(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ALPHAABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ALPHA *ALPHARaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ALPHA.Contract.ALPHACaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ALPHA *ALPHARaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ALPHA.Contract.ALPHATransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ALPHA *ALPHARaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ALPHA.Contract.ALPHATransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ALPHA *ALPHACallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ALPHA.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ALPHA *ALPHATransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ALPHA.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ALPHA *ALPHATransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ALPHA.Contract.contract.Transact(opts, method, params...)
}

// DevFee is a free data retrieval call binding the contract method 0xaa45026b.
//
// Solidity: function _devFee() view returns(uint256)
func (_ALPHA *ALPHACaller) DevFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "_devFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DevFee is a free data retrieval call binding the contract method 0xaa45026b.
//
// Solidity: function _devFee() view returns(uint256)
func (_ALPHA *ALPHASession) DevFee() (*big.Int, error) {
	return _ALPHA.Contract.DevFee(&_ALPHA.CallOpts)
}

// DevFee is a free data retrieval call binding the contract method 0xaa45026b.
//
// Solidity: function _devFee() view returns(uint256)
func (_ALPHA *ALPHACallerSession) DevFee() (*big.Int, error) {
	return _ALPHA.Contract.DevFee(&_ALPHA.CallOpts)
}

// LiquidityFee is a free data retrieval call binding the contract method 0x6bc87c3a.
//
// Solidity: function _liquidityFee() view returns(uint256)
func (_ALPHA *ALPHACaller) LiquidityFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "_liquidityFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiquidityFee is a free data retrieval call binding the contract method 0x6bc87c3a.
//
// Solidity: function _liquidityFee() view returns(uint256)
func (_ALPHA *ALPHASession) LiquidityFee() (*big.Int, error) {
	return _ALPHA.Contract.LiquidityFee(&_ALPHA.CallOpts)
}

// LiquidityFee is a free data retrieval call binding the contract method 0x6bc87c3a.
//
// Solidity: function _liquidityFee() view returns(uint256)
func (_ALPHA *ALPHACallerSession) LiquidityFee() (*big.Int, error) {
	return _ALPHA.Contract.LiquidityFee(&_ALPHA.CallOpts)
}

// TaxFee is a free data retrieval call binding the contract method 0x3b124fe7.
//
// Solidity: function _taxFee() view returns(uint256)
func (_ALPHA *ALPHACaller) TaxFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "_taxFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TaxFee is a free data retrieval call binding the contract method 0x3b124fe7.
//
// Solidity: function _taxFee() view returns(uint256)
func (_ALPHA *ALPHASession) TaxFee() (*big.Int, error) {
	return _ALPHA.Contract.TaxFee(&_ALPHA.CallOpts)
}

// TaxFee is a free data retrieval call binding the contract method 0x3b124fe7.
//
// Solidity: function _taxFee() view returns(uint256)
func (_ALPHA *ALPHACallerSession) TaxFee() (*big.Int, error) {
	return _ALPHA.Contract.TaxFee(&_ALPHA.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ALPHA *ALPHACaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ALPHA *ALPHASession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ALPHA.Contract.Allowance(&_ALPHA.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ALPHA *ALPHACallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ALPHA.Contract.Allowance(&_ALPHA.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ALPHA *ALPHACaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ALPHA *ALPHASession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ALPHA.Contract.BalanceOf(&_ALPHA.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ALPHA *ALPHACallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ALPHA.Contract.BalanceOf(&_ALPHA.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ALPHA *ALPHACaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ALPHA *ALPHASession) Decimals() (uint8, error) {
	return _ALPHA.Contract.Decimals(&_ALPHA.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ALPHA *ALPHACallerSession) Decimals() (uint8, error) {
	return _ALPHA.Contract.Decimals(&_ALPHA.CallOpts)
}

// IsExcludedFromFee is a free data retrieval call binding the contract method 0x5342acb4.
//
// Solidity: function isExcludedFromFee(address account) view returns(bool)
func (_ALPHA *ALPHACaller) IsExcludedFromFee(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "isExcludedFromFee", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsExcludedFromFee is a free data retrieval call binding the contract method 0x5342acb4.
//
// Solidity: function isExcludedFromFee(address account) view returns(bool)
func (_ALPHA *ALPHASession) IsExcludedFromFee(account common.Address) (bool, error) {
	return _ALPHA.Contract.IsExcludedFromFee(&_ALPHA.CallOpts, account)
}

// IsExcludedFromFee is a free data retrieval call binding the contract method 0x5342acb4.
//
// Solidity: function isExcludedFromFee(address account) view returns(bool)
func (_ALPHA *ALPHACallerSession) IsExcludedFromFee(account common.Address) (bool, error) {
	return _ALPHA.Contract.IsExcludedFromFee(&_ALPHA.CallOpts, account)
}

// IsExcludedFromReward is a free data retrieval call binding the contract method 0x88f82020.
//
// Solidity: function isExcludedFromReward(address account) view returns(bool)
func (_ALPHA *ALPHACaller) IsExcludedFromReward(opts *bind.CallOpts, account common.Address) (bool, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "isExcludedFromReward", account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsExcludedFromReward is a free data retrieval call binding the contract method 0x88f82020.
//
// Solidity: function isExcludedFromReward(address account) view returns(bool)
func (_ALPHA *ALPHASession) IsExcludedFromReward(account common.Address) (bool, error) {
	return _ALPHA.Contract.IsExcludedFromReward(&_ALPHA.CallOpts, account)
}

// IsExcludedFromReward is a free data retrieval call binding the contract method 0x88f82020.
//
// Solidity: function isExcludedFromReward(address account) view returns(bool)
func (_ALPHA *ALPHACallerSession) IsExcludedFromReward(account common.Address) (bool, error) {
	return _ALPHA.Contract.IsExcludedFromReward(&_ALPHA.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ALPHA *ALPHACaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ALPHA *ALPHASession) Name() (string, error) {
	return _ALPHA.Contract.Name(&_ALPHA.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ALPHA *ALPHACallerSession) Name() (string, error) {
	return _ALPHA.Contract.Name(&_ALPHA.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ALPHA *ALPHACaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ALPHA *ALPHASession) Owner() (common.Address, error) {
	return _ALPHA.Contract.Owner(&_ALPHA.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ALPHA *ALPHACallerSession) Owner() (common.Address, error) {
	return _ALPHA.Contract.Owner(&_ALPHA.CallOpts)
}

// ReflectionFromToken is a free data retrieval call binding the contract method 0x4549b039.
//
// Solidity: function reflectionFromToken(uint256 tAmount, bool deductTransferFee) view returns(uint256)
func (_ALPHA *ALPHACaller) ReflectionFromToken(opts *bind.CallOpts, tAmount *big.Int, deductTransferFee bool) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "reflectionFromToken", tAmount, deductTransferFee)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReflectionFromToken is a free data retrieval call binding the contract method 0x4549b039.
//
// Solidity: function reflectionFromToken(uint256 tAmount, bool deductTransferFee) view returns(uint256)
func (_ALPHA *ALPHASession) ReflectionFromToken(tAmount *big.Int, deductTransferFee bool) (*big.Int, error) {
	return _ALPHA.Contract.ReflectionFromToken(&_ALPHA.CallOpts, tAmount, deductTransferFee)
}

// ReflectionFromToken is a free data retrieval call binding the contract method 0x4549b039.
//
// Solidity: function reflectionFromToken(uint256 tAmount, bool deductTransferFee) view returns(uint256)
func (_ALPHA *ALPHACallerSession) ReflectionFromToken(tAmount *big.Int, deductTransferFee bool) (*big.Int, error) {
	return _ALPHA.Contract.ReflectionFromToken(&_ALPHA.CallOpts, tAmount, deductTransferFee)
}

// SwapAndLiquifyEnabled is a free data retrieval call binding the contract method 0x4a74bb02.
//
// Solidity: function swapAndLiquifyEnabled() view returns(bool)
func (_ALPHA *ALPHACaller) SwapAndLiquifyEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "swapAndLiquifyEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SwapAndLiquifyEnabled is a free data retrieval call binding the contract method 0x4a74bb02.
//
// Solidity: function swapAndLiquifyEnabled() view returns(bool)
func (_ALPHA *ALPHASession) SwapAndLiquifyEnabled() (bool, error) {
	return _ALPHA.Contract.SwapAndLiquifyEnabled(&_ALPHA.CallOpts)
}

// SwapAndLiquifyEnabled is a free data retrieval call binding the contract method 0x4a74bb02.
//
// Solidity: function swapAndLiquifyEnabled() view returns(bool)
func (_ALPHA *ALPHACallerSession) SwapAndLiquifyEnabled() (bool, error) {
	return _ALPHA.Contract.SwapAndLiquifyEnabled(&_ALPHA.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ALPHA *ALPHACaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ALPHA *ALPHASession) Symbol() (string, error) {
	return _ALPHA.Contract.Symbol(&_ALPHA.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ALPHA *ALPHACallerSession) Symbol() (string, error) {
	return _ALPHA.Contract.Symbol(&_ALPHA.CallOpts)
}

// TokenFromReflection is a free data retrieval call binding the contract method 0x2d838119.
//
// Solidity: function tokenFromReflection(uint256 rAmount) view returns(uint256)
func (_ALPHA *ALPHACaller) TokenFromReflection(opts *bind.CallOpts, rAmount *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "tokenFromReflection", rAmount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenFromReflection is a free data retrieval call binding the contract method 0x2d838119.
//
// Solidity: function tokenFromReflection(uint256 rAmount) view returns(uint256)
func (_ALPHA *ALPHASession) TokenFromReflection(rAmount *big.Int) (*big.Int, error) {
	return _ALPHA.Contract.TokenFromReflection(&_ALPHA.CallOpts, rAmount)
}

// TokenFromReflection is a free data retrieval call binding the contract method 0x2d838119.
//
// Solidity: function tokenFromReflection(uint256 rAmount) view returns(uint256)
func (_ALPHA *ALPHACallerSession) TokenFromReflection(rAmount *big.Int) (*big.Int, error) {
	return _ALPHA.Contract.TokenFromReflection(&_ALPHA.CallOpts, rAmount)
}

// TotalFees is a free data retrieval call binding the contract method 0x13114a9d.
//
// Solidity: function totalFees() view returns(uint256)
func (_ALPHA *ALPHACaller) TotalFees(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "totalFees")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalFees is a free data retrieval call binding the contract method 0x13114a9d.
//
// Solidity: function totalFees() view returns(uint256)
func (_ALPHA *ALPHASession) TotalFees() (*big.Int, error) {
	return _ALPHA.Contract.TotalFees(&_ALPHA.CallOpts)
}

// TotalFees is a free data retrieval call binding the contract method 0x13114a9d.
//
// Solidity: function totalFees() view returns(uint256)
func (_ALPHA *ALPHACallerSession) TotalFees() (*big.Int, error) {
	return _ALPHA.Contract.TotalFees(&_ALPHA.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ALPHA *ALPHACaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ALPHA *ALPHASession) TotalSupply() (*big.Int, error) {
	return _ALPHA.Contract.TotalSupply(&_ALPHA.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ALPHA *ALPHACallerSession) TotalSupply() (*big.Int, error) {
	return _ALPHA.Contract.TotalSupply(&_ALPHA.CallOpts)
}

// UniswapV2Pair is a free data retrieval call binding the contract method 0x49bd5a5e.
//
// Solidity: function uniswapV2Pair() view returns(address)
func (_ALPHA *ALPHACaller) UniswapV2Pair(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "uniswapV2Pair")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UniswapV2Pair is a free data retrieval call binding the contract method 0x49bd5a5e.
//
// Solidity: function uniswapV2Pair() view returns(address)
func (_ALPHA *ALPHASession) UniswapV2Pair() (common.Address, error) {
	return _ALPHA.Contract.UniswapV2Pair(&_ALPHA.CallOpts)
}

// UniswapV2Pair is a free data retrieval call binding the contract method 0x49bd5a5e.
//
// Solidity: function uniswapV2Pair() view returns(address)
func (_ALPHA *ALPHACallerSession) UniswapV2Pair() (common.Address, error) {
	return _ALPHA.Contract.UniswapV2Pair(&_ALPHA.CallOpts)
}

// UniswapV2Router is a free data retrieval call binding the contract method 0x1694505e.
//
// Solidity: function uniswapV2Router() view returns(address)
func (_ALPHA *ALPHACaller) UniswapV2Router(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ALPHA.contract.Call(opts, &out, "uniswapV2Router")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UniswapV2Router is a free data retrieval call binding the contract method 0x1694505e.
//
// Solidity: function uniswapV2Router() view returns(address)
func (_ALPHA *ALPHASession) UniswapV2Router() (common.Address, error) {
	return _ALPHA.Contract.UniswapV2Router(&_ALPHA.CallOpts)
}

// UniswapV2Router is a free data retrieval call binding the contract method 0x1694505e.
//
// Solidity: function uniswapV2Router() view returns(address)
func (_ALPHA *ALPHACallerSession) UniswapV2Router() (common.Address, error) {
	return _ALPHA.Contract.UniswapV2Router(&_ALPHA.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ALPHA *ALPHATransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ALPHA *ALPHASession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.Approve(&_ALPHA.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ALPHA *ALPHATransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.Approve(&_ALPHA.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ALPHA *ALPHATransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ALPHA *ALPHASession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.DecreaseAllowance(&_ALPHA.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ALPHA *ALPHATransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.DecreaseAllowance(&_ALPHA.TransactOpts, spender, subtractedValue)
}

// Deliver is a paid mutator transaction binding the contract method 0x3bd5d173.
//
// Solidity: function deliver(uint256 tAmount) returns()
func (_ALPHA *ALPHATransactor) Deliver(opts *bind.TransactOpts, tAmount *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "deliver", tAmount)
}

// Deliver is a paid mutator transaction binding the contract method 0x3bd5d173.
//
// Solidity: function deliver(uint256 tAmount) returns()
func (_ALPHA *ALPHASession) Deliver(tAmount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.Deliver(&_ALPHA.TransactOpts, tAmount)
}

// Deliver is a paid mutator transaction binding the contract method 0x3bd5d173.
//
// Solidity: function deliver(uint256 tAmount) returns()
func (_ALPHA *ALPHATransactorSession) Deliver(tAmount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.Deliver(&_ALPHA.TransactOpts, tAmount)
}

// ExcludeFromFee is a paid mutator transaction binding the contract method 0x437823ec.
//
// Solidity: function excludeFromFee(address account) returns()
func (_ALPHA *ALPHATransactor) ExcludeFromFee(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "excludeFromFee", account)
}

// ExcludeFromFee is a paid mutator transaction binding the contract method 0x437823ec.
//
// Solidity: function excludeFromFee(address account) returns()
func (_ALPHA *ALPHASession) ExcludeFromFee(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.ExcludeFromFee(&_ALPHA.TransactOpts, account)
}

// ExcludeFromFee is a paid mutator transaction binding the contract method 0x437823ec.
//
// Solidity: function excludeFromFee(address account) returns()
func (_ALPHA *ALPHATransactorSession) ExcludeFromFee(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.ExcludeFromFee(&_ALPHA.TransactOpts, account)
}

// ExcludeFromReward is a paid mutator transaction binding the contract method 0x52390c02.
//
// Solidity: function excludeFromReward(address account) returns()
func (_ALPHA *ALPHATransactor) ExcludeFromReward(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "excludeFromReward", account)
}

// ExcludeFromReward is a paid mutator transaction binding the contract method 0x52390c02.
//
// Solidity: function excludeFromReward(address account) returns()
func (_ALPHA *ALPHASession) ExcludeFromReward(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.ExcludeFromReward(&_ALPHA.TransactOpts, account)
}

// ExcludeFromReward is a paid mutator transaction binding the contract method 0x52390c02.
//
// Solidity: function excludeFromReward(address account) returns()
func (_ALPHA *ALPHATransactorSession) ExcludeFromReward(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.ExcludeFromReward(&_ALPHA.TransactOpts, account)
}

// IncludeInFee is a paid mutator transaction binding the contract method 0xea2f0b37.
//
// Solidity: function includeInFee(address account) returns()
func (_ALPHA *ALPHATransactor) IncludeInFee(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "includeInFee", account)
}

// IncludeInFee is a paid mutator transaction binding the contract method 0xea2f0b37.
//
// Solidity: function includeInFee(address account) returns()
func (_ALPHA *ALPHASession) IncludeInFee(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.IncludeInFee(&_ALPHA.TransactOpts, account)
}

// IncludeInFee is a paid mutator transaction binding the contract method 0xea2f0b37.
//
// Solidity: function includeInFee(address account) returns()
func (_ALPHA *ALPHATransactorSession) IncludeInFee(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.IncludeInFee(&_ALPHA.TransactOpts, account)
}

// IncludeInReward is a paid mutator transaction binding the contract method 0x3685d419.
//
// Solidity: function includeInReward(address account) returns()
func (_ALPHA *ALPHATransactor) IncludeInReward(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "includeInReward", account)
}

// IncludeInReward is a paid mutator transaction binding the contract method 0x3685d419.
//
// Solidity: function includeInReward(address account) returns()
func (_ALPHA *ALPHASession) IncludeInReward(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.IncludeInReward(&_ALPHA.TransactOpts, account)
}

// IncludeInReward is a paid mutator transaction binding the contract method 0x3685d419.
//
// Solidity: function includeInReward(address account) returns()
func (_ALPHA *ALPHATransactorSession) IncludeInReward(account common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.IncludeInReward(&_ALPHA.TransactOpts, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ALPHA *ALPHATransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ALPHA *ALPHASession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.IncreaseAllowance(&_ALPHA.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ALPHA *ALPHATransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.IncreaseAllowance(&_ALPHA.TransactOpts, spender, addedValue)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ALPHA *ALPHATransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ALPHA *ALPHASession) RenounceOwnership() (*types.Transaction, error) {
	return _ALPHA.Contract.RenounceOwnership(&_ALPHA.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ALPHA *ALPHATransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ALPHA.Contract.RenounceOwnership(&_ALPHA.TransactOpts)
}

// SetDevFeePercent is a paid mutator transaction binding the contract method 0x379e2919.
//
// Solidity: function setDevFeePercent(uint256 devFee) returns()
func (_ALPHA *ALPHATransactor) SetDevFeePercent(opts *bind.TransactOpts, devFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "setDevFeePercent", devFee)
}

// SetDevFeePercent is a paid mutator transaction binding the contract method 0x379e2919.
//
// Solidity: function setDevFeePercent(uint256 devFee) returns()
func (_ALPHA *ALPHASession) SetDevFeePercent(devFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.SetDevFeePercent(&_ALPHA.TransactOpts, devFee)
}

// SetDevFeePercent is a paid mutator transaction binding the contract method 0x379e2919.
//
// Solidity: function setDevFeePercent(uint256 devFee) returns()
func (_ALPHA *ALPHATransactorSession) SetDevFeePercent(devFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.SetDevFeePercent(&_ALPHA.TransactOpts, devFee)
}

// SetDevWalletAddress is a paid mutator transaction binding the contract method 0x120a0612.
//
// Solidity: function setDevWalletAddress(address devWalletAddress) returns()
func (_ALPHA *ALPHATransactor) SetDevWalletAddress(opts *bind.TransactOpts, devWalletAddress common.Address) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "setDevWalletAddress", devWalletAddress)
}

// SetDevWalletAddress is a paid mutator transaction binding the contract method 0x120a0612.
//
// Solidity: function setDevWalletAddress(address devWalletAddress) returns()
func (_ALPHA *ALPHASession) SetDevWalletAddress(devWalletAddress common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.SetDevWalletAddress(&_ALPHA.TransactOpts, devWalletAddress)
}

// SetDevWalletAddress is a paid mutator transaction binding the contract method 0x120a0612.
//
// Solidity: function setDevWalletAddress(address devWalletAddress) returns()
func (_ALPHA *ALPHATransactorSession) SetDevWalletAddress(devWalletAddress common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.SetDevWalletAddress(&_ALPHA.TransactOpts, devWalletAddress)
}

// SetLiquidityFeePercent is a paid mutator transaction binding the contract method 0x8ee88c53.
//
// Solidity: function setLiquidityFeePercent(uint256 liquidityFee) returns()
func (_ALPHA *ALPHATransactor) SetLiquidityFeePercent(opts *bind.TransactOpts, liquidityFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "setLiquidityFeePercent", liquidityFee)
}

// SetLiquidityFeePercent is a paid mutator transaction binding the contract method 0x8ee88c53.
//
// Solidity: function setLiquidityFeePercent(uint256 liquidityFee) returns()
func (_ALPHA *ALPHASession) SetLiquidityFeePercent(liquidityFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.SetLiquidityFeePercent(&_ALPHA.TransactOpts, liquidityFee)
}

// SetLiquidityFeePercent is a paid mutator transaction binding the contract method 0x8ee88c53.
//
// Solidity: function setLiquidityFeePercent(uint256 liquidityFee) returns()
func (_ALPHA *ALPHATransactorSession) SetLiquidityFeePercent(liquidityFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.SetLiquidityFeePercent(&_ALPHA.TransactOpts, liquidityFee)
}

// SetSwapAndLiquifyEnabled is a paid mutator transaction binding the contract method 0xc49b9a80.
//
// Solidity: function setSwapAndLiquifyEnabled(bool _enabled) returns()
func (_ALPHA *ALPHATransactor) SetSwapAndLiquifyEnabled(opts *bind.TransactOpts, _enabled bool) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "setSwapAndLiquifyEnabled", _enabled)
}

// SetSwapAndLiquifyEnabled is a paid mutator transaction binding the contract method 0xc49b9a80.
//
// Solidity: function setSwapAndLiquifyEnabled(bool _enabled) returns()
func (_ALPHA *ALPHASession) SetSwapAndLiquifyEnabled(_enabled bool) (*types.Transaction, error) {
	return _ALPHA.Contract.SetSwapAndLiquifyEnabled(&_ALPHA.TransactOpts, _enabled)
}

// SetSwapAndLiquifyEnabled is a paid mutator transaction binding the contract method 0xc49b9a80.
//
// Solidity: function setSwapAndLiquifyEnabled(bool _enabled) returns()
func (_ALPHA *ALPHATransactorSession) SetSwapAndLiquifyEnabled(_enabled bool) (*types.Transaction, error) {
	return _ALPHA.Contract.SetSwapAndLiquifyEnabled(&_ALPHA.TransactOpts, _enabled)
}

// SetTaxFeePercent is a paid mutator transaction binding the contract method 0x061c82d0.
//
// Solidity: function setTaxFeePercent(uint256 taxFee) returns()
func (_ALPHA *ALPHATransactor) SetTaxFeePercent(opts *bind.TransactOpts, taxFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "setTaxFeePercent", taxFee)
}

// SetTaxFeePercent is a paid mutator transaction binding the contract method 0x061c82d0.
//
// Solidity: function setTaxFeePercent(uint256 taxFee) returns()
func (_ALPHA *ALPHASession) SetTaxFeePercent(taxFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.SetTaxFeePercent(&_ALPHA.TransactOpts, taxFee)
}

// SetTaxFeePercent is a paid mutator transaction binding the contract method 0x061c82d0.
//
// Solidity: function setTaxFeePercent(uint256 taxFee) returns()
func (_ALPHA *ALPHATransactorSession) SetTaxFeePercent(taxFee *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.SetTaxFeePercent(&_ALPHA.TransactOpts, taxFee)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ALPHA *ALPHATransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ALPHA *ALPHASession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.Transfer(&_ALPHA.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_ALPHA *ALPHATransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.Transfer(&_ALPHA.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ALPHA *ALPHATransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ALPHA *ALPHASession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.TransferFrom(&_ALPHA.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_ALPHA *ALPHATransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ALPHA.Contract.TransferFrom(&_ALPHA.TransactOpts, sender, recipient, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ALPHA *ALPHATransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ALPHA.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ALPHA *ALPHASession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.TransferOwnership(&_ALPHA.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ALPHA *ALPHATransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ALPHA.Contract.TransferOwnership(&_ALPHA.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ALPHA *ALPHATransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ALPHA.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ALPHA *ALPHASession) Receive() (*types.Transaction, error) {
	return _ALPHA.Contract.Receive(&_ALPHA.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_ALPHA *ALPHATransactorSession) Receive() (*types.Transaction, error) {
	return _ALPHA.Contract.Receive(&_ALPHA.TransactOpts)
}

// ALPHAApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ALPHA contract.
type ALPHAApprovalIterator struct {
	Event *ALPHAApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ALPHAApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ALPHAApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ALPHAApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ALPHAApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ALPHAApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ALPHAApproval represents a Approval event raised by the ALPHA contract.
type ALPHAApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ALPHA *ALPHAFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ALPHAApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ALPHA.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ALPHAApprovalIterator{contract: _ALPHA.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ALPHA *ALPHAFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ALPHAApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ALPHA.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ALPHAApproval)
				if err := _ALPHA.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ALPHA *ALPHAFilterer) ParseApproval(log types.Log) (*ALPHAApproval, error) {
	event := new(ALPHAApproval)
	if err := _ALPHA.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ALPHAMinTokensBeforeSwapUpdatedIterator is returned from FilterMinTokensBeforeSwapUpdated and is used to iterate over the raw logs and unpacked data for MinTokensBeforeSwapUpdated events raised by the ALPHA contract.
type ALPHAMinTokensBeforeSwapUpdatedIterator struct {
	Event *ALPHAMinTokensBeforeSwapUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ALPHAMinTokensBeforeSwapUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ALPHAMinTokensBeforeSwapUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ALPHAMinTokensBeforeSwapUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ALPHAMinTokensBeforeSwapUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ALPHAMinTokensBeforeSwapUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ALPHAMinTokensBeforeSwapUpdated represents a MinTokensBeforeSwapUpdated event raised by the ALPHA contract.
type ALPHAMinTokensBeforeSwapUpdated struct {
	MinTokensBeforeSwap *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterMinTokensBeforeSwapUpdated is a free log retrieval operation binding the contract event 0x5948780118f41f7c4577ae4619d5cbd064057bd8562d9f7b7e60324053375c00.
//
// Solidity: event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap)
func (_ALPHA *ALPHAFilterer) FilterMinTokensBeforeSwapUpdated(opts *bind.FilterOpts) (*ALPHAMinTokensBeforeSwapUpdatedIterator, error) {

	logs, sub, err := _ALPHA.contract.FilterLogs(opts, "MinTokensBeforeSwapUpdated")
	if err != nil {
		return nil, err
	}
	return &ALPHAMinTokensBeforeSwapUpdatedIterator{contract: _ALPHA.contract, event: "MinTokensBeforeSwapUpdated", logs: logs, sub: sub}, nil
}

// WatchMinTokensBeforeSwapUpdated is a free log subscription operation binding the contract event 0x5948780118f41f7c4577ae4619d5cbd064057bd8562d9f7b7e60324053375c00.
//
// Solidity: event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap)
func (_ALPHA *ALPHAFilterer) WatchMinTokensBeforeSwapUpdated(opts *bind.WatchOpts, sink chan<- *ALPHAMinTokensBeforeSwapUpdated) (event.Subscription, error) {

	logs, sub, err := _ALPHA.contract.WatchLogs(opts, "MinTokensBeforeSwapUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ALPHAMinTokensBeforeSwapUpdated)
				if err := _ALPHA.contract.UnpackLog(event, "MinTokensBeforeSwapUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinTokensBeforeSwapUpdated is a log parse operation binding the contract event 0x5948780118f41f7c4577ae4619d5cbd064057bd8562d9f7b7e60324053375c00.
//
// Solidity: event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap)
func (_ALPHA *ALPHAFilterer) ParseMinTokensBeforeSwapUpdated(log types.Log) (*ALPHAMinTokensBeforeSwapUpdated, error) {
	event := new(ALPHAMinTokensBeforeSwapUpdated)
	if err := _ALPHA.contract.UnpackLog(event, "MinTokensBeforeSwapUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ALPHAOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ALPHA contract.
type ALPHAOwnershipTransferredIterator struct {
	Event *ALPHAOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ALPHAOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ALPHAOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ALPHAOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ALPHAOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ALPHAOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ALPHAOwnershipTransferred represents a OwnershipTransferred event raised by the ALPHA contract.
type ALPHAOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ALPHA *ALPHAFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ALPHAOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ALPHA.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ALPHAOwnershipTransferredIterator{contract: _ALPHA.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ALPHA *ALPHAFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ALPHAOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ALPHA.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ALPHAOwnershipTransferred)
				if err := _ALPHA.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ALPHA *ALPHAFilterer) ParseOwnershipTransferred(log types.Log) (*ALPHAOwnershipTransferred, error) {
	event := new(ALPHAOwnershipTransferred)
	if err := _ALPHA.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ALPHASwapAndLiquifyIterator is returned from FilterSwapAndLiquify and is used to iterate over the raw logs and unpacked data for SwapAndLiquify events raised by the ALPHA contract.
type ALPHASwapAndLiquifyIterator struct {
	Event *ALPHASwapAndLiquify // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ALPHASwapAndLiquifyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ALPHASwapAndLiquify)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ALPHASwapAndLiquify)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ALPHASwapAndLiquifyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ALPHASwapAndLiquifyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ALPHASwapAndLiquify represents a SwapAndLiquify event raised by the ALPHA contract.
type ALPHASwapAndLiquify struct {
	TokensSwapped      *big.Int
	EthReceived        *big.Int
	TokensIntoLiqudity *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterSwapAndLiquify is a free log retrieval operation binding the contract event 0x17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb561.
//
// Solidity: event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity)
func (_ALPHA *ALPHAFilterer) FilterSwapAndLiquify(opts *bind.FilterOpts) (*ALPHASwapAndLiquifyIterator, error) {

	logs, sub, err := _ALPHA.contract.FilterLogs(opts, "SwapAndLiquify")
	if err != nil {
		return nil, err
	}
	return &ALPHASwapAndLiquifyIterator{contract: _ALPHA.contract, event: "SwapAndLiquify", logs: logs, sub: sub}, nil
}

// WatchSwapAndLiquify is a free log subscription operation binding the contract event 0x17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb561.
//
// Solidity: event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity)
func (_ALPHA *ALPHAFilterer) WatchSwapAndLiquify(opts *bind.WatchOpts, sink chan<- *ALPHASwapAndLiquify) (event.Subscription, error) {

	logs, sub, err := _ALPHA.contract.WatchLogs(opts, "SwapAndLiquify")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ALPHASwapAndLiquify)
				if err := _ALPHA.contract.UnpackLog(event, "SwapAndLiquify", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwapAndLiquify is a log parse operation binding the contract event 0x17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb561.
//
// Solidity: event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity)
func (_ALPHA *ALPHAFilterer) ParseSwapAndLiquify(log types.Log) (*ALPHASwapAndLiquify, error) {
	event := new(ALPHASwapAndLiquify)
	if err := _ALPHA.contract.UnpackLog(event, "SwapAndLiquify", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ALPHASwapAndLiquifyEnabledUpdatedIterator is returned from FilterSwapAndLiquifyEnabledUpdated and is used to iterate over the raw logs and unpacked data for SwapAndLiquifyEnabledUpdated events raised by the ALPHA contract.
type ALPHASwapAndLiquifyEnabledUpdatedIterator struct {
	Event *ALPHASwapAndLiquifyEnabledUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ALPHASwapAndLiquifyEnabledUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ALPHASwapAndLiquifyEnabledUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ALPHASwapAndLiquifyEnabledUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ALPHASwapAndLiquifyEnabledUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ALPHASwapAndLiquifyEnabledUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ALPHASwapAndLiquifyEnabledUpdated represents a SwapAndLiquifyEnabledUpdated event raised by the ALPHA contract.
type ALPHASwapAndLiquifyEnabledUpdated struct {
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSwapAndLiquifyEnabledUpdated is a free log retrieval operation binding the contract event 0x53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc159.
//
// Solidity: event SwapAndLiquifyEnabledUpdated(bool enabled)
func (_ALPHA *ALPHAFilterer) FilterSwapAndLiquifyEnabledUpdated(opts *bind.FilterOpts) (*ALPHASwapAndLiquifyEnabledUpdatedIterator, error) {

	logs, sub, err := _ALPHA.contract.FilterLogs(opts, "SwapAndLiquifyEnabledUpdated")
	if err != nil {
		return nil, err
	}
	return &ALPHASwapAndLiquifyEnabledUpdatedIterator{contract: _ALPHA.contract, event: "SwapAndLiquifyEnabledUpdated", logs: logs, sub: sub}, nil
}

// WatchSwapAndLiquifyEnabledUpdated is a free log subscription operation binding the contract event 0x53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc159.
//
// Solidity: event SwapAndLiquifyEnabledUpdated(bool enabled)
func (_ALPHA *ALPHAFilterer) WatchSwapAndLiquifyEnabledUpdated(opts *bind.WatchOpts, sink chan<- *ALPHASwapAndLiquifyEnabledUpdated) (event.Subscription, error) {

	logs, sub, err := _ALPHA.contract.WatchLogs(opts, "SwapAndLiquifyEnabledUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ALPHASwapAndLiquifyEnabledUpdated)
				if err := _ALPHA.contract.UnpackLog(event, "SwapAndLiquifyEnabledUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwapAndLiquifyEnabledUpdated is a log parse operation binding the contract event 0x53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc159.
//
// Solidity: event SwapAndLiquifyEnabledUpdated(bool enabled)
func (_ALPHA *ALPHAFilterer) ParseSwapAndLiquifyEnabledUpdated(log types.Log) (*ALPHASwapAndLiquifyEnabledUpdated, error) {
	event := new(ALPHASwapAndLiquifyEnabledUpdated)
	if err := _ALPHA.contract.UnpackLog(event, "SwapAndLiquifyEnabledUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ALPHATransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ALPHA contract.
type ALPHATransferIterator struct {
	Event *ALPHATransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ALPHATransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ALPHATransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ALPHATransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ALPHATransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ALPHATransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ALPHATransfer represents a Transfer event raised by the ALPHA contract.
type ALPHATransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ALPHA *ALPHAFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ALPHATransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ALPHA.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ALPHATransferIterator{contract: _ALPHA.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ALPHA *ALPHAFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ALPHATransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ALPHA.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ALPHATransfer)
				if err := _ALPHA.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ALPHA *ALPHAFilterer) ParseTransfer(log types.Log) (*ALPHATransfer, error) {
	event := new(ALPHATransfer)
	if err := _ALPHA.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
